# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11TShQ9mY6Z-Bbs0uvS0QHmXxCjNFeHXA
"""

# Install required packages
!pip install flask-ngrok
!pip install flask
!pip install pyngrok

#  Import necessary libraries
from flask import Flask, request, jsonify
from flask_ngrok import run_with_ngrok
import joblib
import pandas as pd

# Initialize Flask app
app = Flask(__name__)
run_with_ngrok(app)

# Load saved artifacts
MODEL_PATH = '/content/ipl_match_winner_model.pkl'
SCALER_PATH = '/content/scaler.pkl'
ENCODER_PATH = '/content/label_encoder.pkl'
FEATURES_PATH = '/content/features.pkl'

model = None
scaler = None
encoder = None
feature_columns = None

def load_models():
    global model, scaler,encoder, feature_columns
    try:
        model = joblib.load(MODEL_PATH)
        scaler = joblib.load(SCALER_PATH)
        encoder = joblib.load(ENCODER_PATH)
        feature_columns = joblib.load(FEATURES_PATH)
        print("[INFO] Models loaded successfully!")
    except Exception as e:
        print(f"[ERROR] Model Loading Failed: {e}")

#  Preprocessing function
def prepare_input(data):
    try:
        df = pd.DataFrame([data])
        df_encoded = pd.get_dummies(df)
        # Add further preprocessing steps here if needed
        return df_encoded # Return the preprocessed data
    except Exception as e:
        print(f"[ERROR] Preprocessing Failed: {e}")
        return None # Return None in case of error

#  Preprocessing function
def prepare_input(data):
    try:
        df = pd.DataFrame([data])
        df_encoded = pd.get_dummies(df)
        # Make sure all columns match
        for col in feature_columns:
            if col not in df_encoded.columns:
                df_encoded[col] = 0

        df_encoded = df_encoded[feature_columns]
        data_scaled = scaler.transform(df_encoded)
        return data_scaled # Return the preprocessed data
    except Exception as e:
        print(f"[ERROR] Preprocessing Failed: {e}")
        return None # Return None in case of error

# HOME ROUTE
@app.route('/', methods=['GET'])
def home():
    return "üèè Welcome to the IPL Match Winner Predictor API!"

@app.route('/predict', methods=['POST'])
def predict_winner():
    try:
        # Get input JSON
        data = request.get_json()

        if not data:
            return jsonify({'error': 'Empty or invalid input.'}), 400

        processed_input = preprocess_input(data)

        if processed_input is None:
            return jsonify({'error': 'Failed to preprocess input.'}), 400

        # Predict
        pred = model.predict(processed_input)
        winner = encoder.inverse_transform(pred)[0]

        return jsonify({'predicted_winner': winner})

    except Exception as e:
        return jsonify

# Run Flask App
if __name__ == '__main__':
    pass